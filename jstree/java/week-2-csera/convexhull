if signed are > 0 then a --> b --> c is counterclockwise
if signed are < 0 then a --> b --> c is clockwise
if signed are > 0 then a --> b --> c is collinear


 // CROSSPRODUCT APPLIED TO NULL VECTOR //
// apply this to individual wavelengths //
 public class Point2D
 {
    private final double x;
    private final double y;

    // this could be applied to regulated database (at the origin) //

    public Point2D(double x, double y)
    {
        this.x = x;
        this.y = y;
    
    }
    // this could be applied to DE-fi and wallets // 
    ...

    public static int ccw(Point 2D a, Point2D b, Point 2D c)
    {
        double area2 = (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-c.x)
        if      (area2 < 0) return -1; // failed// 
        else if (area2 > 0) return +1; //succeed//
        else                return 0; //null// import energy
    }
 }

// simplifying assumptions aka allocating energy //

Stack<Point2D> hull = new Stack<Point>();

Arrays.sort(p, Point2D.Y_ORDER);
Arrays.sort(p, p[0],BY_POLAR_ORDER);

hull.push(p[0]); //bottom null//
hull.push(p[1]); //top null //

for (int i = 2; i < N; i++) {
    Point2D top = hull.pop();
    while (Point2D.ccw(hull.peek(), top, p[i] <= 0)
        top = hull.pop();
    hull.push(top); // insert energy //
    hull.push(p[i]); // this will be a certain value deemed necessary per capia //
}

//running time is N long N for sorting and linear for running //
