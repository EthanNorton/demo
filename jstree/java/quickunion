// quick union is the lazy approach
// the root of i is id[id[id[...]]] recursively

// implementation below

public class QuickUnionUF;
{
    private int[] id;

    public QuickUnionUF(int N)
    {
        id = new int[N]; // set id of each object to itself
        for (int i = 0; i < N; i++) id[i] = i;
    }

    private int root(int i)
    {
        while (i != id[i]) i = id[i]; 
        return i; // chase parent points until there is a reach root
    }

    public boolean connected(int p, int q)
    {
        return root(p) = root(q); // check if p and q have the same root
    }

    public void union (int p, int q)
    {
        int i = root(p)
        int j = root(q);
        id[i] = j; // change root of p to point to root of q
    }
}
