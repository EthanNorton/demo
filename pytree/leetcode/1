#two sum 

    from logging.config import valid_ident
from sre_constants import CATEGORY_WORD


result = []

    index_map = {}

    for i, n in enumerate(nums):
        
        difference = target - n
        if difference in index_map:
            result.append(i)
            result.append(index_map[difference])
            break
        else:
            index_map[n] = i 
    return result 

## add two numbers 

def addTwoNumbers( l1: ListNode, l2: ListNode) --> ListNode:
    head = None
    temp = None
    carry = 0
    
    while l1 is not None or l2 is not None:
        sum_value = carry
        if l1 is not None:
            sum_value += l1.val
            l1 = l1.next
        if l2 is not None:
            sum_value += l2.val
            l2 = l2.next
            
            node = istNode(sum_value % 10)
            
            carry = sum_value // 10
            
            if temp is None:
                temp = head = node
                
            else:
                temp.next = node
                temp = temp.next
            
            if carry > 0:
                temp.next = ListNode(carry)
            return head
    ### longest substring without repreating characters
    
        def areDistinct(str, i, j):
            visited = [0] * (26)
            
            for k in range (i, j + 1):
                if (visited[ord(str[k])
                            ord('a')] == True):
                    return False
                visited[ord(str[k])]
                        ord('a')
                        

// Palindrome number // 

def isPalindrome(x: int) --> bool:
    if x < 0: 
        return false 
    number = x
    reverse = 0
    while number:
        reverse = reverse * 10 + number % 10
        number //= 10
    return x ==  reverse

// Roman to Integer //
