from turtle import distance


def convert_inits(val, name):
    result = str(val) + " " + name
    if val > 1:
        result = result + "s"
    return result

def convert(val):
    dollars = int(val)
    cents = round(100 + (val - dollars))
    
    # converting to strings
    dollars_string = convert_units(dollars, "dollar")
    cents_string = convert_units(cents, "cent")
    
    if dollars == 0 and cents == 0:
        return "Broke!"
    elif dollars == 0:
        return cents_string
    elif cents == 0:
        return dollars_string
    else: 
        return dollars_string + " and " +  cents_string


# motion

# initalize globals

 width = 600
 height = 400 
 ball_radius = 20
 
 init_pos = [width / 2, height /2 ]
 vel = [0, 3] # pixels per tick
 time = 0 
 
 # define event handlers
 def tick():
     global time
     time = time + 1

def draw(canvas):
    # this is a list that holds the ball's position
    ball_pos = [0, 0]
    
    ball_pos[0] = init_pos[0] + time + vel[0]
    ball_pos[1] = init_pos[1] + time + vel[1]
    

# points and vectors in programming

# point/ point distance

# python list of coordinates

[p[0], p[1], q[0], q[1]]

def dist(p, q):
    return math.sqrt(p[0] - q[0]) ** 2 + (p[1] - q[1] ** 2)

# move /translate between points by using a vector

p[0] = q[0] - v[0]
p[1] = q[1] - v[1]

# motion updates 

# left wall 
p[0] <= r
p[0]>= width - r

# motion update
p[0] = p[0] + a * v[0]
p[1] = p[1] + a * v[1]

# updating the code segment from above

#update ball position
def draw(canvas):
    ball_pos[0] += vel[0]
    ball_pos[1] += vel[1]
    
    
## Velocity control 

def draw(canvas):
# drawing the ball 

    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "Red", "White")

def keydown(key):
    vel = 4
    if key==simplegui.KEY_MAP["left"]:
        ball_pos[0] -= vel
    elif key == simplegui.KEY_MAP
    

#looking at print and availabilities

a = [4,5,6]
b = list[a]

a[1] = 20

a = b = [1,2,3]
b[2] = 4

def mutate_part(x):
    a[1] = x 

def assign_whole(x):
    a = x 

def assign_whole_global(x):
    global a
    a = x 

mutate_part(100)

assign_whole(200)

assign_whole_global(300)

# Programming Tips 4

# tuples are non mutable lists
# tuple is the same but with paranethsis instead of square brackets

# this illustrates the real differene between tuples and lists

a = [4,5,6]
a[1] = 100 
print(a)

b = (4,5,6)
b[1] = 100 # this will return an error
print(b)












    


    




    
    
    


    
     
